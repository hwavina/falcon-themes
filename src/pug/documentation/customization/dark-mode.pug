extends ../../layouts/LayoutComponent

block append variables
  
  -
    var pageHeader = {
      title: 'Dark Mode',
      description: `It’s effortless to switch Dark Mode in Falcon. You can enable Dark Mode by default or create a Dark/Light switch if you want. To set the default mode "Dark", please see the <a href='${CWD}${paths['doc-configuration']}'>configuration page</a>.`,
    }

block append content
  +PageHeader(pageHeader)
  .card.mb-3
    .card-header
      h5.mb-0 If you are using gulp based workflow

    .card-body.bg-light
      h6.fs-0 Modify  Dark colors using SCSS
      p You can find all the variables used to create the dark mode in 
        code /src/scss/theme/root/_dark.scss
        |  file. If you want to override a variable, copy that variable to your 
        code /src/scss/theme/user.scss
        |  file and update it as you see fit. When you change the variable with scss, make sure that the gulp is running.
  .card.mb-3
    .card-header
      h5.mb-0 If you are not using gulp based workflow

    .card-body.bg-light
      h6.fs-0 Modify  Dark colors using CSS
      p You can find all the CSS variables used to create the dark mode in 
        code /public/assets/css/theme.css
        |  file. Look for the class 
        code :root.dark
        |  and you will see all the available variables. If you want to override a variable, copy that variable to your 
        code /public/assets/css/user.css
        |  file and update it as you see fit.
      pre
        code.lang-css.
          /*-----------------------------------------------
          |   Theme Styles
          -----------------------------------------------*/
          :root, :root.light, :root .light {
            --falcon-100: #f9fafd;
            --falcon-200: #edf2f9;
            --falcon-300: #d8e2ef;
          }

          .dark {
            --falcon-100: #0b1727;
            --falcon-200: #232e3c;
            --falcon-300: #344050;
          }
  .card.mb-3
    .card-header
      h5.mb-0 Using the Dark CSS classes in HTML

    .card-body.bg-light
      h6.fs-0 You can keep a style constant regardless of current (light or dark) mode
      p If you want a component to retain it’s color (light or dark) as it is regardless of the current mode, you can use the following classes -
      p 
        code .light
        |  - It will keep the color light even if the current mode is dark
      p 
        code .dark
        |  - It will keep the color dark even if the current mode is light
      p The following two examples illustrate the color persistency -
      .row.gx-3
        .col-lg-6
          +ComponentCard
            .card.bg-100.light
              .card-body 
                p.mb-0.text-700
                  b This element will retain it's color if you switch between light and dark mode.
        .col-lg-6.mt-3.mt-lg-0
          +ComponentCard
            .card.bg-100.dark
              .card-body 
                p.mb-0.text-700
                  b This element will retain it's color if you switch between light and dark mode.


      h6.fs-0.mt-4 Override Background and Text color only for dark mode
      p If you want to use a different text color or background color rather than the default dark theme color for any element, you can use the special "dark" classes: 
      ul
        li 
          code dark__bg-* 
        li
          code dark__text-* 
      p The following element illustrates the example:
      +ComponentCard
        .card.bg-light.dark__bg-primary
          .card-body 
            p.mb-0
              span.fw-bold This element will retain it's color if you switch between light and dark mode.

  .card.mb-3
    .card-header
      h5.mb-0 Emit JavaScript event on color scheme change
    .card-body.bg-light
      p When you switch between the dark and light mode, or change any settings from the global theme config at runtime, we emit an  event 
        code clickControl 
        br
        | We used this event to update colors using JavaScript. For example, the charts change their colors using this event. You can catch and use this event with the following code snippet:
      pre
        code.lang-js.
          const themeController = document.body;

          themeController.addEventListener(
            "clickControl",
            ({ detail: { control, value } }) => {

              if (control === "theme") {
                console.log(value) // value will be localStorage theme value (dark/light)
                // your code here

              }
            }
          );


